{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Authorize: {\"Username\": \"local:admin\", \"Password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/aperture/api/users/authorize: {\"username\": \"local:admin\", \"password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "Response to https://192.168.7.157/vedsdk/Config/Create is valid. Got 200.", "filename": "base.py", "source": "40:\t    def _validate(self):\n41:\t        self._validated = True\n42:\t\n43:\t        if not isinstance(self.response, Response):\n44:\t            raise TypeError(\"Expected response object, but got %s.\" % type(self.response))\n45:\t\n46:\t        if self.response.status_code not in self._valid_return_codes:\n47:\t            raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\n48:\t\n49:\t        self.logger.log('Response to %s is valid. Got %s.' %(self._url, self.response.status_code))\n", "lineno": "49", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\TestThreads.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\\folder_20191107075155_2\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\\folder_20191107075155_4\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\\folder_20191107075155_0\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\\folder_20191107075155_1\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\TestThreads\\folder_20191107075155_3\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_2\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_3\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_4\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_1\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_0\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\TestThreads\\folder_20191107075155_2.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Credentials/Create: {\"CredentialPath\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_2\\\\y_20191107075155_2\", \"FriendlyName\": \"UsernamePassword\", \"Password\": null, \"Values\": [{\"Type\": \"string\", \"Name\": \"Username\", \"Value\": \"admin\"}, {\"Type\": \"string\", \"Name\": \"Password\", \"Value\": \"newPassw0rd!\"}], \"Expiration\": \"/Date(1888498318716)/\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\TestThreads\\folder_20191107075155_3.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Credentials/Create: {\"CredentialPath\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_3\\\\y_20191107075155_3\", \"FriendlyName\": \"UsernamePassword\", \"Password\": null, \"Values\": [{\"Type\": \"string\", \"Name\": \"Username\", \"Value\": \"admin\"}, {\"Type\": \"string\", \"Name\": \"Password\", \"Value\": \"newPassw0rd!\"}], \"Expiration\": \"/Date(1888498318766)/\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Credentials/Create: {\"CredentialPath\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_0\\\\y_20191107075155_0\", \"FriendlyName\": \"UsernamePassword\", \"Password\": null, \"Values\": [{\"Type\": \"string\", \"Name\": \"Username\", \"Value\": \"admin\"}, {\"Type\": \"string\", \"Name\": \"Password\", \"Value\": \"newPassw0rd!\"}], \"Expiration\": \"/Date(1888498318766)/\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\TestThreads\\folder_20191107075155_4.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\TestThreads\\folder_20191107075155_1.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.auth.preference == ApiPreferences.websdk:\n68:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.auth.preference == ApiPreferences.aperture:\n70:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Credentials/Create: {\"CredentialPath\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_1\\\\y_20191107075155_1\", \"FriendlyName\": \"UsernamePassword\", \"Password\": null, \"Values\": [{\"Type\": \"string\", \"Name\": \"Username\", \"Value\": \"admin\"}, {\"Type\": \"string\", \"Name\": \"Password\", \"Value\": \"newPassw0rd!\"}], \"Expiration\": \"/Date(1888498318866)/\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Credentials/Create: {\"CredentialPath\": \"\\\\VED\\\\Policy\\\\TestThreads\\\\folder_20191107075155_4\\\\y_20191107075155_4\", \"FriendlyName\": \"UsernamePassword\", \"Password\": null, \"Values\": [{\"Type\": \"string\", \"Name\": \"Username\", \"Value\": \"admin\"}, {\"Type\": \"string\", \"Name\": \"Password\", \"Value\": \"newPassw0rd!\"}], \"Expiration\": \"/Date(1888498318866)/\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "Response to https://192.168.7.157/vedsdk/Credentials/Create is valid. Got 200.", "filename": "base.py", "source": "40:\t    def _validate(self):\n41:\t        self._validated = True\n42:\t\n43:\t        if not isinstance(self.response, Response):\n44:\t            raise TypeError(\"Expected response object, but got %s.\" % type(self.response))\n45:\t\n46:\t        if self.response.status_code not in self._valid_return_codes:\n47:\t            raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\n48:\t\n49:\t        self.logger.log('Response to %s is valid. Got %s.' %(self._url, self.response.status_code))\n", "lineno": "49", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "Credential object created successfully.", "filename": "credentials.py", "source": "22:\t        @property\n23:\t        @response_property()\n24:\t        def result(self):\n25:\t            result = self.response.json().get('Result')\n26:\t            result = Credentials.Result(result)\n27:\t            if result.code != 1:\n28:\t                raise ValueError('Could not create credential. Received %s: %s.' % (result.code, result.credential_result))\n29:\t            self.logger.log('Credential object created successfully.')\n30:\t            return result\n", "lineno": "29", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\websdk\\endpoints"}
{"log_level": 1, "text": "UsernamePassword credential \"\\VED\\Policy\\TestThreads\\folder_20191107075155_2\\y_20191107075155_2\" created successfully.", "filename": "credentials.py", "source": "11:\t    def create(self, name, folder, username, password):\n12:\t        \"\"\"\n13:\t        :type name: str\n14:\t        :type folder: Folder\n15:\t        :type username: str\n16:\t        :type password: str\n17:\t        \"\"\"\n18:\t        dn = folder.dn + \"\\\\\" + name\n19:\t\n20:\t        if self.auth.preference == ApiPreferences.aperture:\n21:\t            self._logger.log(FeatureError.not_implemented(ApiPreferences.aperture).message)\n22:\t\n23:\t        result = self.auth.websdk.Credentials.Create.post(\n24:\t            credential_path=dn,\n25:\t            friendly_name='UsernamePassword',\n26:\t            values=[\n27:\t                {'Name': 'Username', 'Type': 'string', 'Value': username},\n28:\t                {'Name': 'Password', 'Type': 'string', 'Value': password}\n29:\t            ]\n30:\t        ).result\n31:\t\n32:\t        self._logger.log('UsernamePassword credential \"%s\" created successfully.' % dn)\n33:\t\n34:\t        self.load()\n35:\t        return self\n", "lineno": "32", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "Credential object created successfully.", "filename": "credentials.py", "source": "22:\t        @property\n23:\t        @response_property()\n24:\t        def result(self):\n25:\t            result = self.response.json().get('Result')\n26:\t            result = Credentials.Result(result)\n27:\t            if result.code != 1:\n28:\t                raise ValueError('Could not create credential. Received %s: %s.' % (result.code, result.credential_result))\n29:\t            self.logger.log('Credential object created successfully.')\n30:\t            return result\n", "lineno": "29", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\websdk\\endpoints"}
{"log_level": 1, "text": "UsernamePassword credential \"\\VED\\Policy\\TestThreads\\folder_20191107075155_3\\y_20191107075155_3\" created successfully.", "filename": "credentials.py", "source": "11:\t    def create(self, name, folder, username, password):\n12:\t        \"\"\"\n13:\t        :type name: str\n14:\t        :type folder: Folder\n15:\t        :type username: str\n16:\t        :type password: str\n17:\t        \"\"\"\n18:\t        dn = folder.dn + \"\\\\\" + name\n19:\t\n20:\t        if self.auth.preference == ApiPreferences.aperture:\n21:\t            self._logger.log(FeatureError.not_implemented(ApiPreferences.aperture).message)\n22:\t\n23:\t        result = self.auth.websdk.Credentials.Create.post(\n24:\t            credential_path=dn,\n25:\t            friendly_name='UsernamePassword',\n26:\t            values=[\n27:\t                {'Name': 'Username', 'Type': 'string', 'Value': username},\n28:\t                {'Name': 'Password', 'Type': 'string', 'Value': password}\n29:\t            ]\n30:\t        ).result\n31:\t\n32:\t        self._logger.log('UsernamePassword credential \"%s\" created successfully.' % dn)\n33:\t\n34:\t        self.load()\n35:\t        return self\n", "lineno": "32", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "Credential object created successfully.", "filename": "credentials.py", "source": "22:\t        @property\n23:\t        @response_property()\n24:\t        def result(self):\n25:\t            result = self.response.json().get('Result')\n26:\t            result = Credentials.Result(result)\n27:\t            if result.code != 1:\n28:\t                raise ValueError('Could not create credential. Received %s: %s.' % (result.code, result.credential_result))\n29:\t            self.logger.log('Credential object created successfully.')\n30:\t            return result\n", "lineno": "29", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\websdk\\endpoints"}
{"log_level": 1, "text": "UsernamePassword credential \"\\VED\\Policy\\TestThreads\\folder_20191107075155_0\\y_20191107075155_0\" created successfully.", "filename": "credentials.py", "source": "11:\t    def create(self, name, folder, username, password):\n12:\t        \"\"\"\n13:\t        :type name: str\n14:\t        :type folder: Folder\n15:\t        :type username: str\n16:\t        :type password: str\n17:\t        \"\"\"\n18:\t        dn = folder.dn + \"\\\\\" + name\n19:\t\n20:\t        if self.auth.preference == ApiPreferences.aperture:\n21:\t            self._logger.log(FeatureError.not_implemented(ApiPreferences.aperture).message)\n22:\t\n23:\t        result = self.auth.websdk.Credentials.Create.post(\n24:\t            credential_path=dn,\n25:\t            friendly_name='UsernamePassword',\n26:\t            values=[\n27:\t                {'Name': 'Username', 'Type': 'string', 'Value': username},\n28:\t                {'Name': 'Password', 'Type': 'string', 'Value': password}\n29:\t            ]\n30:\t        ).result\n31:\t\n32:\t        self._logger.log('UsernamePassword credential \"%s\" created successfully.' % dn)\n33:\t\n34:\t        self.load()\n35:\t        return self\n", "lineno": "32", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "Credential object created successfully.", "filename": "credentials.py", "source": "22:\t        @property\n23:\t        @response_property()\n24:\t        def result(self):\n25:\t            result = self.response.json().get('Result')\n26:\t            result = Credentials.Result(result)\n27:\t            if result.code != 1:\n28:\t                raise ValueError('Could not create credential. Received %s: %s.' % (result.code, result.credential_result))\n29:\t            self.logger.log('Credential object created successfully.')\n30:\t            return result\n", "lineno": "29", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\websdk\\endpoints"}
{"log_level": 1, "text": "UsernamePassword credential \"\\VED\\Policy\\TestThreads\\folder_20191107075155_4\\y_20191107075155_4\" created successfully.", "filename": "credentials.py", "source": "11:\t    def create(self, name, folder, username, password):\n12:\t        \"\"\"\n13:\t        :type name: str\n14:\t        :type folder: Folder\n15:\t        :type username: str\n16:\t        :type password: str\n17:\t        \"\"\"\n18:\t        dn = folder.dn + \"\\\\\" + name\n19:\t\n20:\t        if self.auth.preference == ApiPreferences.aperture:\n21:\t            self._logger.log(FeatureError.not_implemented(ApiPreferences.aperture).message)\n22:\t\n23:\t        result = self.auth.websdk.Credentials.Create.post(\n24:\t            credential_path=dn,\n25:\t            friendly_name='UsernamePassword',\n26:\t            values=[\n27:\t                {'Name': 'Username', 'Type': 'string', 'Value': username},\n28:\t                {'Name': 'Password', 'Type': 'string', 'Value': password}\n29:\t            ]\n30:\t        ).result\n31:\t\n32:\t        self._logger.log('UsernamePassword credential \"%s\" created successfully.' % dn)\n33:\t\n34:\t        self.load()\n35:\t        return self\n", "lineno": "32", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "Credential object created successfully.", "filename": "credentials.py", "source": "22:\t        @property\n23:\t        @response_property()\n24:\t        def result(self):\n25:\t            result = self.response.json().get('Result')\n26:\t            result = Credentials.Result(result)\n27:\t            if result.code != 1:\n28:\t                raise ValueError('Could not create credential. Received %s: %s.' % (result.code, result.credential_result))\n29:\t            self.logger.log('Credential object created successfully.')\n30:\t            return result\n", "lineno": "29", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\websdk\\endpoints"}
{"log_level": 1, "text": "UsernamePassword credential \"\\VED\\Policy\\TestThreads\\folder_20191107075155_1\\y_20191107075155_1\" created successfully.", "filename": "credentials.py", "source": "11:\t    def create(self, name, folder, username, password):\n12:\t        \"\"\"\n13:\t        :type name: str\n14:\t        :type folder: Folder\n15:\t        :type username: str\n16:\t        :type password: str\n17:\t        \"\"\"\n18:\t        dn = folder.dn + \"\\\\\" + name\n19:\t\n20:\t        if self.auth.preference == ApiPreferences.aperture:\n21:\t            self._logger.log(FeatureError.not_implemented(ApiPreferences.aperture).message)\n22:\t\n23:\t        result = self.auth.websdk.Credentials.Create.post(\n24:\t            credential_path=dn,\n25:\t            friendly_name='UsernamePassword',\n26:\t            values=[\n27:\t                {'Name': 'Username', 'Type': 'string', 'Value': username},\n28:\t                {'Name': 'Password', 'Type': 'string', 'Value': password}\n29:\t            ]\n30:\t        ).result\n31:\t\n32:\t        self._logger.log('UsernamePassword credential \"%s\" created successfully.' % dn)\n33:\t\n34:\t        self.load()\n35:\t        return self\n", "lineno": "32", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
