{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Authorize: {\"Username\": \"local:admin\", \"Password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/aperture/api/users/authorize: {\"username\": \"local:admin\", \"password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\folder_3\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\folder_2\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\folder_1\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\folder_0\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\folder_3\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\folder_1\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\folder_2\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\folder_4\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://192.168.7.157/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\folder_0\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "Response to https://192.168.7.157/vedsdk/Config/Create is valid. Got 200.", "filename": "base.py", "source": "40:\t    def _validate(self):\n41:\t        self._validated = True\n42:\t\n43:\t        if not isinstance(self.response, Response):\n44:\t            raise TypeError(\"Expected response object, but got %s.\" % type(self.response))\n45:\t\n46:\t        if self.response.status_code not in self._valid_return_codes:\n47:\t            raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\n48:\t\n49:\t        self.logger.log('Response to %s is valid. Got %s.' %(self._url, self.response.status_code))\n", "lineno": "49", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\folder_1.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "86", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\folder_3.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "86", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\folder_2.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "86", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\folder_4.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "86", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\folder_0.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None, num_objects=1):\n50:\t        if num_objects > 1:\n51:\t            threads = [\n52:\t                self.create_thread(\n53:\t                    self.create, name=\"%s_%s\" % (name, i), container=container, attributes=attributes, num_objects=-1\n54:\t                ) for i in range(num_objects)\n55:\t            ]\n56:\t            return self.run_threads(threads)\n57:\t        elif num_objects == -1:\n58:\t            self = Folder(self.auth)\n59:\t\n60:\t        if not name:\n61:\t            if not self.name:\n62:\t                raise AssertionError('Must supply a name property.')\n63:\t            name = self.name\n64:\t        if not container:\n65:\t            if not self.container:\n66:\t                raise AssertionError('Must supply a container property.')\n67:\t            container = self.container\n68:\t        if not attributes:\n69:\t            if self.attributes:\n70:\t                if not isinstance(attributes, list):\n71:\t                    raise TypeError('Attributes must be a list.')\n72:\t                attributes = self.attributes\n73:\t\n74:\t        dn = container + '\\\\' + name\n75:\t\n76:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n77:\t        if self.auth.preference == ApiPreferences.websdk:\n78:\t            policy = self.auth.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n79:\t        elif self.auth.preference == ApiPreferences.aperture:\n80:\t            policy = self.auth.aperture.ConfigObjects.Policies.post(name, container).object\n81:\t        else:\n82:\t            raise FeatureError.invalid_api_preference(self.auth.preference)\n83:\t\n84:\t        self.load(policy)\n85:\t        if self.dn:\n86:\t            self._logger.log('Folder DN is %s.' % self.dn)\n87:\t        else:\n88:\t            raise ValueError('DN not created as expected.')\n89:\t\n90:\t        return self\n", "lineno": "86", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
