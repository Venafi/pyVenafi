{"log_level": 0, "text": "https://10.1.91.101/vedsdk/Authorize: {\"Username\": \"local:TPPAdmin\", \"Password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://10.1.91.101/aperture/api/users/authorize: {\"username\": \"local:TPPAdmin\", \"password\": \"newPassw0rd!\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Creating policy with DN \"\\VED\\Policy\\Tyler_20191030122738\".", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.api.preference == ApiPreferences.websdk:\n68:\t            policy = self.api.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.api.preference == ApiPreferences.aperture:\n70:\t            policy = self.api.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.api.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "66", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://10.1.91.101/vedsdk/Config/Create: {\"Class\": \"Policy\", \"NameAttributeList\": [], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\Tyler_20191030122738\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "Response to https://10.1.91.101/vedsdk/Config/Create is valid. Got 200.", "filename": "base.py", "source": "40:\t    def _validate(self):\n41:\t        self._validated = True\n42:\t\n43:\t        if not isinstance(self.response, Response):\n44:\t            raise TypeError(\"Expected response object, but got %s.\" % type(self.response))\n45:\t\n46:\t        if self.response.status_code not in self._valid_return_codes:\n47:\t            raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\n48:\t\n49:\t        self.logger.log('Response to %s is valid. Got %s.' %(self._url, self.response.status_code))\n", "lineno": "49", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Folder DN is \\VED\\Policy\\Tyler_20191030122738.", "filename": "folder.py", "source": "49:\t    def create(self, name=None, container=None, attributes=None):\n50:\t        if not name:\n51:\t            if not self.name:\n52:\t                raise AssertionError('Must supply a name property.')\n53:\t            name = self.name\n54:\t        if not container:\n55:\t            if not self.container:\n56:\t                raise AssertionError('Must supply a container property.')\n57:\t            container = self.container\n58:\t        if not attributes:\n59:\t            if self.attributes:\n60:\t                if not isinstance(attributes, list):\n61:\t                    raise TypeError('Attributes must be a list.')\n62:\t                attributes = self.attributes\n63:\t\n64:\t        dn = container + '\\\\' + name\n65:\t\n66:\t        self._logger.log('Creating policy with DN \"%s\".' % dn)\n67:\t        if self.api.preference == ApiPreferences.websdk:\n68:\t            policy = self.api.websdk.Config.Create.post(dn, ConfigClass.policy, attributes or []).object\n69:\t        elif self.api.preference == ApiPreferences.aperture:\n70:\t            policy = self.api.aperture.ConfigObjects.Policies.post(name, container).object\n71:\t        else:\n72:\t            raise FeatureError.invalid_api_preference(self.api.preference)\n73:\t\n74:\t        self.load(policy)\n75:\t        if self.dn:\n76:\t            self._logger.log('Folder DN is %s.' % self.dn)\n77:\t        else:\n78:\t            raise ValueError('DN not created as expected.')\n79:\t\n80:\t        return self\n", "lineno": "76", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://10.1.91.101/vedsdk/Config/Create: {\"Class\": \"Device\", \"NameAttributeList\": [{\"Name\": \"Host\", \"Value\": \"dc.psdev.local\"}, {\"Name\": \"Temp Directory\", \"Value\": \"C:\\\\Temp\"}, {\"Name\": \"Remote Server Type\", \"Value\": \"OS_WINDOWS\"}, {\"Name\": \"Credential\", \"Value\": \"\\\\VED\\\\Policy\\\\Credentials\\\\Win Domain\"}], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\Tyler_20191030122738\\\\TylersDevice\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 0, "text": "https://10.1.91.101/vedsdk/Config/Create: {\"Class\": \"PKCS11\", \"NameAttributeList\": [{\"Name\": \"Driver Name\", \"Value\": \"apppkcs11\"}, {\"Name\": \"Disabled\", \"Value\": \"0\"}, {\"Name\": \"HSM:Certificate Directory\", \"Value\": \"C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\E1\\\\\\\\RSA\\\\\\\\Oracle\"}, {\"Name\": \"HSM:Requested Usecase\", \"Value\": \"TLS Server - RSA - IBM JVM\"}], \"ObjectDN\": \"\\\\VED\\\\Policy\\\\Tyler_20191030122738\\\\TylersDevice\\\\TylersApp\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 1, "text": "Deleting policy with DN \"\\VED\\Policy\\Tyler_20191030122738\".", "filename": "folder.py", "source": "82:\t    def delete(self, object_dn, recursive=False):\n83:\t        self._logger.log('Deleting policy with DN \"%s\".' % object_dn)\n84:\t        if self.api.preference == ApiPreferences.aperture:\n85:\t            self._logger(FeatureError.not_implemented(ApiPreferences.aperture))\n86:\t\n87:\t        result = self.api.websdk.Config.Delete.post(object_dn, recursive).result\n88:\t        self.reinitialize()\n", "lineno": "83", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features"}
{"log_level": 0, "text": "https://10.1.91.101/vedsdk/Config/Delete: {\"Recursive\": true, \"ObjectDN\": \"\\\\VED\\\\Policy\\\\Tyler_20191030122738\"}", "filename": "session.py", "source": "16:\t    def post(self, url, data, verify=False):\n17:\t        self._logger.log('%s: %s' %(url, data))\n18:\t        return requests.post(url=url, data=data, headers=self.headers, verify=verify)\n", "lineno": "17", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
{"log_level": 9, "text": "<span style=\"white-space: pre-wrap; color: red\">Traceback (most recent call last):\n  File \"C:/Users/LL/PycharmProjects/NewFoundation/testfile.py\", line 70, in <module>\n    x.create_pkcs11_application()\n  File \"C:/Users/LL/PycharmProjects/NewFoundation/testfile.py\", line 64, in create_pkcs11_application\n    print(application.dn)\n  File \"C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features\\folder.py\", line 27, in __exit__\n    self.delete(self.dn, recursive=True)\n  File \"C:\\Users\\LL\\PycharmProjects\\NewFoundation\\features\\folder.py\", line 87, in delete\n    result = self.api.websdk.Config.Delete.post(object_dn, recursive).result\n  File \"C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\base.py\", line 11, in wrap\n    self._validate()\n  File \"C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs\\base.py\", line 47, in _validate\n    raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\nInvalidResponseError: Received 401, but expected one of [200]. Error message is: {\"error\":\"API key '1a37e670-8d35-8662-87ba-17426be763d1' is not valid. Try \\/authorize or \\/authorize\\/integrated\"}\n</span>", "filename": "base.py", "source": "40:\t    def _validate(self):\n41:\t        self._validated = True\n42:\t\n43:\t        if not isinstance(self.response, Response):\n44:\t            raise TypeError(\"Expected response object, but got %s.\" % type(self.response))\n45:\t\n46:\t        if self.response.status_code not in self._valid_return_codes:\n47:\t            raise InvalidResponseError(\"Received %s, but expected one of %s. Error message is: %s\" % (self.response.status_code, str(self._valid_return_codes), self.response.text))\n48:\t\n49:\t        self.logger.log('Response to %s is valid. Got %s.' %(self._url, self.response.status_code))\n", "lineno": "47", "path": "C:\\Users\\LL\\PycharmProjects\\NewFoundation\\apilibs"}
